<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>设计思路 on wenzhuo4657</title>
    <link>https://example.org/categories/%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/</link>
    <description>Recent content in 设计思路 on wenzhuo4657</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 21 Jan 2025 15:01:05 +0000</lastBuildDate>
    <atom:link href="https://example.org/categories/%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>单路分发和多路分发</title>
      <link>https://example.org/posts/%E5%8D%95%E8%B7%AF%E5%88%86%E5%8F%91%E5%92%8C%E5%A4%9A%E8%B7%AF%E5%88%86%E5%8F%91/</link>
      <pubDate>Tue, 21 Jan 2025 15:01:05 +0000</pubDate>
      <guid>https://example.org/posts/%E5%8D%95%E8%B7%AF%E5%88%86%E5%8F%91%E5%92%8C%E5%A4%9A%E8%B7%AF%E5%88%86%E5%8F%91/</guid>
      <description>&lt;h1 id=&#34;单路分发&#34;&gt;单路分发&lt;/h1&gt;&#xA;&lt;p&gt;前置概念：&#xA;接收者对象：方法调用的目标对象&#xA;动态链接：在Java源文件被编译到字节码文件时，所有的变量和方法引用都作为符号引用保存在&lt;strong&gt;class文件的常量池&lt;/strong&gt;里。&#xA;引用类型/静态类型：java对象的声明类型&#xA;运行类型：jvm中对象的实际类型，是堆区数据的对象类型。&lt;/p&gt;&#xA;&lt;p&gt;java对象的多态性导致其引用类型和运行类型两者的区分，且各自的方法可能出现重写的现象，因而在对象执行过程中需要找到正确的方法。jvm只有在运行阶段才会创建对象，调用方法时根据动态链接找到堆区的方法实现。。&lt;/p&gt;&#xA;&lt;p&gt;java单路分发：接收者对象（实际上是指堆区创建的对象，也就是运行类型）调用方法时根据动态链接找到方法区的真正实现。&lt;/p&gt;&#xA;&lt;p&gt;单路分发定义：查找方法只能根据接收者对象判断，而不考虑方法参数的实际类型。&lt;/p&gt;&#xA;&lt;p&gt;例如：&lt;code&gt;string.valueof(bi)&lt;/code&gt; 接收者对象为string,单路分发只会考虑方法参数的引用类型，而非实际类型。&lt;/p&gt;&#xA;&lt;p&gt;注意：我们说java方法调用是单路分发，不考虑方法参数的&lt;strong&gt;实际类型&lt;/strong&gt;。其中对于实际类型的理解需要和重载相区分，因为重载是从参数的引用类型进行选择。而我们所说的单路分发、多路分发实际上是根据方法的实际运行类型进行选择方法的具体实现（动态链接），而java的机制仅仅只支持根据接受者对象来选择方法的动态链接，因此java的分发机制是单路分发。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;方法重载的匹配：编译器在编译时根据参数类型选择最匹配的方法。&lt;/li&gt;&#xA;&lt;li&gt;编译器生成的字节码：编译器将方法调用转换为字节码指令，这些指令包含了方法调用的具体信息。&lt;/li&gt;&#xA;&lt;li&gt;动态链接：在类加载时，方法引用被解析为具体的方法地址。在方法调用时，JVM 根据接收者对象的实际类型选择具体的方法实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;两路分发和多路分发&#34;&gt;两路分发和多路分发&lt;/h1&gt;&#xA;&lt;p&gt;参考;&lt;a href=&#34;https://www.cnblogs.com/Yee-Q/p/14035322.html&#34;&gt;Java 枚举 enum 详解 - 低吟不作语 - 博客园&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;java实现两路分发实际上就是在方法调用中再次触发方法调用，根据方法参数的实际类型进行选择方法。&lt;/p&gt;&#xA;&lt;p&gt;硬编码实现&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;##&lt;/span&gt; 可以使用枚举&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;、&lt;/span&gt;swich简化代码实现&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Outcome &lt;span style=&#34;color:#a6e22e&#34;&gt;compete&lt;/span&gt;(Item it) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it.&lt;span style=&#34;color:#a6e22e&#34;&gt;eval&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;且注意，只有&lt;code&gt;it.eveal(this)&lt;/code&gt;找到的方法才是期望的方法，第一次执行找到compete方法是实现两路分发的过程。&lt;/p&gt;&#xA;&lt;p&gt;EnumMap 实现：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; enums;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.*;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import static&lt;/span&gt; enums.Outcome.*;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; RoShamBo5 &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Competitor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RoShamBo5&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PAPER, SCISSORS, ROCK;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; EnumMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RoShamBo5,EnumMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RoShamBo5,Outcome&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EnumMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(RoShamBo5 it : RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            table.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(it, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EnumMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        initRow(PAPER, DRAW, LOSE, WIN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        initRow(SCISSORS, WIN, DRAW, LOSE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        initRow(ROCK, LOSE, WIN, DRAW);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initRow&lt;/span&gt;(RoShamBo5 it,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        Outcome vPAPER, Outcome vSCISSORS, Outcome vROCK) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        EnumMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RoShamBo5,Outcome&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(it);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;PAPER&lt;/span&gt;, vPAPER);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;SCISSORS&lt;/span&gt;, vSCISSORS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;ROCK&lt;/span&gt;, vROCK);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Outcome &lt;span style=&#34;color:#a6e22e&#34;&gt;compete&lt;/span&gt;(RoShamBo5 it) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; table.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(it);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RoShamBo.&lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;, 20);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上依旧是二次选择，只是没有触发方法的动态链接机制，而是通过map类型手动填充了一张表格进行分发。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
