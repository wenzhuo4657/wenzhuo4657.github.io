<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OS on 猢狲</title>
    <link>http://localhost:1313/categories/os/</link>
    <description>Recent content in OS on 猢狲</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 15 Feb 2025 16:23:43 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>零拷贝</title>
      <link>http://localhost:1313/posts/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Sat, 15 Feb 2025 16:23:43 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</guid>
      <description>&lt;p&gt;首先说结论，零拷贝技术是针对与磁盘中数据到网卡发送数据的一个简化，是系统函数级别的优化，与程序编程无关，在使用中我们只需要调用即可。&lt;/p&gt;&#xA;&lt;h2 id=&#34;系统拷贝-readwrite&#34;&gt;系统拷贝 read/write&lt;/h2&gt;&#xA;&lt;p&gt;前置概念：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;页缓存（内核缓冲区）：该区域是为了提升磁盘数据的读写速度所设立的一个区域，处于（主存）内存当中。&lt;/li&gt;&#xA;&lt;li&gt;socket缓冲区：是内核为每个 Socket 分配的内存区域，用于临时存储发送和接收的数据，处于（主存）内存当中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;os系统的加载，学过操作系统的都知道，内存当中的区域分为内核态和用户态。&lt;/p&gt;&#xA;&lt;p&gt;在操作系统启动时，cpu会根据cs:ip表示的地址进行寻址，找到位于磁盘当中的操作系统程序部分，最终结果可以认为将系统代码搬进了ram主存当中，并且设置了一些列安全手段，除此之外则还为用户态提供了一系列系统函数。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;磁盘== “外设”&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;对于cpu来说，磁盘相当于外设，它会通过外设上的寄存器来管理，此处衍生出的技术为dma。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;dma:为了避免cpu的重复性的移动地址等的操作，进行的一项优化，具体来说，读取数据到缓冲区等重复性劳动可以交给dma设备。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;但是dma拷贝也并非万能，在某些场景下它不能使用&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户空间和内核空间之间的数据拷贝：内核不能直接访问用户态内存&lt;/li&gt;&#xA;&lt;li&gt;调试和诊断：dma是硬件自动完成，难以插入调试逻辑。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://blog.wenzhuo4657.org/img/image-20250215171022865.png&#34; alt=&#34;image-20250215171022865&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;系统函数&#34;&gt;系统函数&lt;/h1&gt;&#xA;&lt;h2 id=&#34;mmapwrite&#34;&gt;mmap+write&lt;/h2&gt;&#xA;&lt;p&gt;将page buffer和程序工作缓存空间进行映射，减少page-buffer-&amp;gt;程序缓存的cpu拷贝，但是对于程序工作缓存-》socket buffer这一部分仍然需要cpu拷贝。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;为什么仍然是cpu拷贝？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;这里将其理解为，我们仅仅是做到了在用户态可以看到page buffer,但是并没有打破用户态和内核态的内存空间限制，所以此处的拷贝仍然是cpu拷贝，而并非dma拷贝。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250215172019525.png&#34; alt=&#34;image-20250215172019525&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;sendfile&#34;&gt;sendfile&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250215172632051.png&#34; alt=&#34;image-20250215172632051&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如图，sendfile使page buff直接拷贝到socket buffer。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;为什么使用的使cpu拷贝，而非DMA拷贝？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;ds给我的答案使，DMA通常用于外设和主存之间，&lt;/p&gt;&#xA;&lt;h2 id=&#34;网卡支持sg-dma技术的sendfile&#34;&gt;网卡支持SG-DMA技术的sendfile&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250215173227238.png&#34; alt=&#34;image-20250215173227238&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如图，该函数实际上是外设功能的调用，原本socket buffer的功能被网卡认为多余，获取可以被替代之类的，提出直接从page buffer中拷贝。&lt;/p&gt;&#xA;&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;&#xA;&lt;p&gt;实际应用：&lt;/p&gt;&#xA;&lt;p&gt;普通的文件读写：read/write,有利于提高系统速度，但这是非具体场景的随机读取。&lt;/p&gt;&#xA;&lt;p&gt;rocketmq: mmap+write，适合小文件并行，因为该区域用户缓存都可以看到。&lt;/p&gt;&#xA;&lt;p&gt;kafka:sendfile,适合大文件，或者说对于小文件并行支持不好，因为为了安全性，通常会对page buffer进行锁定，避免并发问题。&lt;/p&gt;&#xA;&lt;p&gt;ps:上述总结可以喂给ds，会得到更加优质的回答！&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
