<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>猢狲</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on 猢狲</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 29 Jun 2025 11:10:33 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jdk的接口收集</title>
      <link>http://localhost:1313/follow/jdk%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%94%B6%E9%9B%86/</link>
      <pubDate>Sun, 29 Jun 2025 11:10:33 +0800</pubDate>
      <guid>http://localhost:1313/follow/jdk%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%94%B6%E9%9B%86/</guid>
      <description>&lt;h1 id=&#34;jdk17&#34;&gt;jdk17&lt;/h1&gt;&#xA;&lt;p&gt;需要注意的，无论是何种依赖，他们需要jdk原因都是需要jdk定义的通用接口，换句话说，在执行时最底层一定会使用到他们，这对于问题调试非常有用，我们可以直接定位到这些接口，查看究竟是什么地方有问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;外部接口收集&#34;&gt;外部接口收集&lt;/h2&gt;&#xA;&lt;h3 id=&#34;sql&#34;&gt;sql&lt;/h3&gt;&#xA;&lt;p&gt;只要支持sql，应当都可以使用这些接口&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.sql.Connection     与特定数据库的连接 （会话&#xA;java.sql.Statement    用于执行静态 SQL 语句并返回其生成的结果的对象&#xA;javax.sql.DataSource  用于连接到此 DataSource 对象所表示的物理数据源的工厂&#xA;该 DataSource 接口由驱动程序供应商实现。有三种类型的实现：&#xA;基本实现 -- 生成标准 Connection 对象&#xA;连接池实现 -- 生成 Connection 将自动参与连接池的对象。此实现与中间层连接池管理器一起使用。&#xA;分布式事务实现 -- 生成 Connection 可用于分布式事务的对象，并且几乎总是参与连接池。此实现与中间层事务管理器一起使用，并且几乎总是与连接池管理器一起使用。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ldap&#34;&gt;ldap&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;com.sun.jndi.ldap.LdapCtx      LDAP上下文实现&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;log&#34;&gt;log&lt;/h3&gt;&#xA;&lt;p&gt;这个接口是jdk提供的日志实现，但是多数情况下，我们使用logback等外部实现。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.util.logging.Logger     jul的日志记录根&#xA;java.util.logging.LogManager     有一个全局 LogManager 对象，用于维护一组关于 Logger 和日志服务的共享状态&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>关于utc时区的那些事情</title>
      <link>http://localhost:1313/posts/%E5%85%B3%E4%BA%8Eutc%E6%97%B6%E5%8C%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E6%83%85/</link>
      <pubDate>Sun, 29 Jun 2025 10:00:14 +0800</pubDate>
      <guid>http://localhost:1313/posts/%E5%85%B3%E4%BA%8Eutc%E6%97%B6%E5%8C%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E6%83%85/</guid>
      <description>&lt;p&gt;首先说结论，utc时区是一种分区，对于全球时间的划分、转换，例如，北京时间8点，实际上等于英国时间0点。哈哈哈，还是很模糊吧，最开始我也是这么认为的，但是在编程时遇到一些东西还是不懂，根本无法分清他们。&lt;/p&gt;&#xA;&lt;h1 id=&#34;基本概念&#34;&gt;基本概念&lt;/h1&gt;&#xA;&lt;p&gt;UTC时间基于经纬度的划分，如果没有他们也无法时间时区的转换，因为所谓的时间，是根据地球对太阳的公转和自传共同作用形成的。&lt;/p&gt;&#xA;&lt;h2 id=&#34;经纬线的定义&#34;&gt;经纬线的定义&lt;/h2&gt;&#xA;&lt;p&gt;经线： 连接南极、北极的半圆弧线&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRysWlVgkDIZvvS4ZsoM_ZL84MiA20e835SHw&amp;amp;s&#34; alt=&#34;经线和经度示意图_地球地图_初高中地理网&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;纬线： 与经线垂直，包围地球表面的一个圆。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/proxy/pikT13oe93jyKeXqpLQtwebl0mrrpM9v5VlcbtDk83ciKXiGpgCFZqoaiIpIIXMuJQ50_sZ_pVDAWMCI4V_yR7N9VKlkXgbasYitJnZa&#34; alt=&#34;纬线和纬度示意图_地球地图_初高中地理网&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;时区的划分&#34;&gt;时区的划分&lt;/h2&gt;&#xA;&lt;p&gt;时区可分为理论时区和法定时区，值得注意的，虽然叫做时区，看上去像是时间的划分，可实际上是地理位置的划分。&lt;/p&gt;&#xA;&lt;p&gt;理论时区又被成为协调世界时，写作UTC。&lt;/p&gt;&#xA;&lt;p&gt;以被15整除的&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%B6%93%E7%B7%9A&#34;&gt;经线&lt;/a&gt;为中心，向东西两侧延伸7.5度，即每15°划分一个时区，这是&lt;strong&gt;理论时区&lt;/strong&gt;，理论时区的时间采用其中央经线（或标准经线）的地方时。所以每差一个时区，区时相差一个小时，相差多少个时区，就相差多少个小时。因此推算，东12区与西12区为同一地方，为避免同一地方日期却相差一天的矛盾，提出&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%9C%8B%E9%9A%9B%E6%8F%9B%E6%97%A5%E7%B7%9A&#34;&gt;国际换日线&lt;/a&gt;的概念，国际换日线东侧比西侧迟整整24小时。&lt;/p&gt;&#xA;&lt;p&gt;ps： 虽然东12和西12被称作两个名字，但他们属于一个时区，这恰恰也证明时区是地理划分，而非时间划分，只是由于换日线的存在，日期不同，而时间相同。因此全球一共有12个时区。&lt;/p&gt;&#xA;&lt;p&gt;不同时区的标识为‘UTC±[hh]’，例如UTC+8标识东八区，也是中国常用的时区，标志是UTC+8 = 北京时间 = Asia/Shanghai，他比0时区早八个小时，这意味着当我们早上8点时，英国此时时0时，而西八区此时还是昨天下午四点。&lt;/p&gt;&#xA;&lt;p&gt;0时区的标识： 如果UTC并无特别标注，或者使用单个字母Z，就表示零时区。例如： 09:30 UTC，09:30Z。此外，0时区的地理标志为格林威治天文台，是国际公认的世界时间起源地。&lt;/p&gt;&#xA;&lt;p&gt;法定时区则是相对于理论时区而言，或者说相对于地理而言，以为理论时区的划分是根据地球整体的划分，而部分国家的时区并不刚好在某个时区内，有可能在两个时区夹缝之中。&lt;/p&gt;&#xA;&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;&#xA;&lt;p&gt;这里仅仅介绍了UTC协调世界时，此外还有其他的时间表示法，例如： 英国仍在使用GMT。&lt;/p&gt;</description>
    </item>
    <item>
      <title>rocketmq的可观测性配置</title>
      <link>http://localhost:1313/posts/rocketmq%E7%9A%84%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sun, 22 Jun 2025 19:14:13 +0800</pubDate>
      <guid>http://localhost:1313/posts/rocketmq%E7%9A%84%E5%8F%AF%E8%A7%82%E6%B5%8B%E6%80%A7%E9%85%8D%E7%BD%AE/</guid>
      <description></description>
    </item>
    <item>
      <title>ssh、gpg以及apt软件下载器</title>
      <link>http://localhost:1313/posts/sshgpg%E4%BB%A5%E5%8F%8Aapt%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%99%A8/</link>
      <pubDate>Sun, 25 May 2025 20:44:43 +0000</pubDate>
      <guid>http://localhost:1313/posts/sshgpg%E4%BB%A5%E5%8F%8Aapt%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;小白级别的理解勿cue&#34;&gt;小白级别的理解，勿cue&lt;/h1&gt;&#xA;&lt;p&gt;首先说结论，ssh、gpt是用于加密，且在加密这个分类下属于非对称加密（指公钥加密、私钥解密），而apt是ubunt等linux系统的一个软甲下载器。&lt;/p&gt;&#xA;&lt;h2 id=&#34;sshgpg&#34;&gt;ssh、gpg&lt;/h2&gt;&#xA;&lt;h3 id=&#34;对称加密和非堆成加密&#34;&gt;对称加密和非堆成加密&lt;/h3&gt;&#xA;&lt;p&gt;对称加密算法使用相同的密钥用于加密或者解密，这使通信双方必须完全信任对方，才能够发送密钥，否则密钥就很可能被泄露，并且在传输过程中泄露也很糟糕。&lt;/p&gt;&#xA;&lt;p&gt;但是由于使用相同的密钥进行加密和解密，所以x速度比较快。&lt;/p&gt;&#xA;&lt;p&gt;而非对称加密算法将密钥分为私钥和公钥，其中私钥用于解密，公钥用于加密。所以相比于同级别的对称加密，非对称加密速度更慢，但安全性更高，我们只需要将公钥发布到任意服务器上即可实现通信（例如 keyserver）&lt;/p&gt;&#xA;&lt;h3 id=&#34;ssh和gpg的区别&#34;&gt;ssh和gpg的区别？&lt;/h3&gt;&#xA;&lt;p&gt;ssh： 常用于服务器加密（实时交互，需要处理动态数据），强度相当于钥匙。&lt;/p&gt;&#xA;&lt;p&gt;gpg： 常用于文件加密（静态数据），强度相当于保险箱。&lt;/p&gt;&#xA;&lt;h3 id=&#34;pgpgpgopenpgp&#34;&gt;pgp、gpg、OpenPGP&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.rmnof.com/article/openpgp-gnupg-introduction/&#34;&gt;OpenPGP（PGP/GPG）深入浅出，完全入门指南&lt;/a&gt;、&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PGP：由Phil Zimmermann开发，最终被赛门铁克收购，是一个商业软件，需要付费。&lt;/li&gt;&#xA;&lt;li&gt;OpenPGP：一种协议，定义了加密消息、签名、私钥和用于交换公钥的证书统一标准。&lt;/li&gt;&#xA;&lt;li&gt;GPG（GnuPG）：符合OpenPGP标准的开源加密软件，PGP的开源实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;&#xA;&lt;h3 id=&#34;创建密钥&#34;&gt;创建密钥&lt;/h3&gt;&#xA;&lt;p&gt;官方推荐的工具&lt;/p&gt;&#xA;&lt;p&gt;ssh：&lt;a href=&#34;https://www.openssh.com/?spm=a2ty_o01.29997173.0.0.299fc921OTUceN&#34;&gt;OpenSSH&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;gpg： &lt;a href=&#34;https://gnupg.org/index.html&#34;&gt;GnuPG&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;公钥服务器&#34;&gt;公钥服务器&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://keyserver.ubuntu.com/?spm=a2ty_o01.29997173.0.0.299fc921OTUceN#&#34;&gt;OpenPGP 密钥服务器&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://keyserver.ubuntu.com/?spm=a2ty_o01.29997173.0.0.299fc921OTUceN#&#34;&gt;OpenPGP 密钥服务器&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;使用gpg密钥&#34;&gt;使用gpg密钥&lt;/h3&gt;&#xA;&lt;p&gt;对于ssh直接进行服务器链接等操作即可，但是gpg密钥是令人迷惑的，因为他是属于静态文件的加密，这意味着灵活性低、安全性高，而这样的加密特性势必要求一个符合的场景，例如：通信的双方必须信任对方，否则没有进行交换文件的必要。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ulyc.github.io/2021/01/26/2021%E5%B9%B4-%E7%94%A8%E6%9B%B4%E7%8E%B0%E4%BB%A3%E7%9A%84%E6%96%B9%E6%B3%95%E4%BD%BF%E7%94%A8PGP-%E4%B8%8B/&#34;&gt;2021年，用更现代的方法使用PGP（下） - C的博客 |UlyC&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;ps： 这篇文章中说的漏洞已经被解决了，需要注意的是里面所提到的交换公钥的方式&lt;/p&gt;&#xA;&lt;h4 id=&#34;gpg的特征&#34;&gt;gpg的特征&lt;/h4&gt;&#xA;&lt;p&gt;这里的特征是指gpg密钥上的签名、指纹等名词，他们在很长一段时间一直困扰我。&lt;/p&gt;&#xA;&lt;h5 id=&#34;1--创建&#34;&gt;1，  创建&lt;/h5&gt;&#xA;&lt;p&gt;&lt;code&gt; gpg   --full-generate-key&lt;/code&gt; 该选项表示功能齐全的密钥生成&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PS C:\Users\25370&amp;gt; gpg  --full-generate-key&#xA;gpg (GnuPG) 2.4.3; Copyright (C) 2023 g10 Code GmbH&#xA;This is free software: you are free to change and redistribute it.&#xA;There is NO WARRANTY, to the extent permitted by law.&#xA;&#xA;Please select what kind of key you want:&#xA;   (1) RSA and RSA&#xA;   (2) DSA and Elgamal&#xA;   (3) DSA (sign only)&#xA;   (4) RSA (sign only)&#xA;   (9) ECC (sign and encrypt) *default*&#xA;  (10) ECC (sign only)&#xA;  (14) Existing key from card&#xA;Your selection? 1&#xA;RSA keys may be between 1024 and 4096 bits long.&#xA;What keysize do you want? (3072) 2048&#xA;Requested keysize is 2048 bits&#xA;Please specify how long the key should be valid.&#xA;         0 = key does not expire&#xA;      &amp;lt;n&amp;gt;  = key expires in n days&#xA;      &amp;lt;n&amp;gt;w = key expires in n weeks&#xA;      &amp;lt;n&amp;gt;m = key expires in n months&#xA;      &amp;lt;n&amp;gt;y = key expires in n years&#xA;Key is valid for? (0) 1y&#xA;Key expires at 2026/5/25 21:39:55 �й���׼ʱ��&#xA;Is this correct? (y/N) y&#xA;&#xA;GnuPG needs to construct a user ID to identify your key.&#xA;&#xA;Real name: wenzhuo4657&#xA;Email address: 14783149521@163.com&#xA;Comment: test&#xA;You selected this USER-ID:&#xA;    &amp;#34;wenzhuo4657 (test) &amp;lt;14783149521@163.com&amp;gt;&amp;#34;&#xA;&#xA;Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? q&#xA;gpg: Key generation canceled.&#xA;PS C:\Users\25370&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这一部分定义了uid： wenzhuo4657 (test) &lt;a href=&#34;mailto:14783149521@163.com&#34;&gt;14783149521@163.com&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>logback官方文档阅读（一）</title>
      <link>http://localhost:1313/posts/logback%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E4%B8%80/</link>
      <pubDate>Wed, 14 May 2025 08:18:43 +0000</pubDate>
      <guid>http://localhost:1313/posts/logback%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%E9%98%85%E8%AF%BB%E4%B8%80/</guid>
      <description>&lt;h3 id=&#34;logback&#34;&gt;logback&lt;/h3&gt;&#xA;&lt;h4 id=&#34;架构&#34;&gt;架构&lt;/h4&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://logback.qos.ch&#34;&gt;Logback 架构&lt;/a&gt;&#xA;logback的核心依赖有：logback-core，logback-classic 和 logback-access&lt;/p&gt;&#xA;&lt;p&gt;core： 核心实现，是其他两个包的基础&#xA;classic：&#xA;logback-classic 模块可以被同化为 log4j 1.x 的显着改进版本。此外，logback-classic 本机实现了 &lt;a href=&#34;http://www.slf4j.org/&#34;&gt;SLF4J API&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;access： 与 Servlet 容器（例如 Tomcat 和 Jetty）集成，以提供 HTTP 访问日志功能&lt;/p&gt;&#xA;&lt;h4 id=&#34;配置&#34;&gt;配置&lt;/h4&gt;&#xA;&lt;p&gt;Logback.xml配置的两个重要标签：&lt;code&gt;Logger&lt;/code&gt;，&lt;code&gt;Appender&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;logger： 指定日志记录根（全限定类名）和appender的关联&#xA;appender： 日志的具体输出实现，例如： 控制台输出、文件输出等&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;示例配置&#xA;&#xA;&amp;lt;configuration scan=&amp;#34;true&amp;#34; scanPeriod=&amp;#34;60 seconds&amp;#34; debug=&amp;#34;false&amp;#34;&amp;gt;&#xA;&amp;lt;property name=&amp;#34;console&amp;#34; value=&amp;#34;==\n[%-5level] %red(%d{HH:mm}) Thread:[%thread]  Method:%green(%M) %cyan(%X{traceId})   classpath:%c \n%highlight(return):%m%n&amp;#34;&amp;gt;&amp;lt;/property&amp;gt;&#xA;&amp;lt;property name=&amp;#34;log_dir&amp;#34; value=&amp;#34;./data/log&amp;#34;&amp;gt;&amp;lt;/property&amp;gt;&#xA;    &amp;lt;appender name=&amp;#34;STDOUT&amp;#34; class=&amp;#34;ch.qos.logback.core.ConsoleAppender&amp;#34;&amp;gt;&#xA;            &amp;lt;encoder class=&amp;#34;ch.qos.logback.classic.encoder.PatternLayoutEncoder&amp;#34;&amp;gt;&#xA;                 &amp;lt;pattern&amp;gt;${console}&amp;lt;/pattern&amp;gt;&#xA;                &amp;lt;charset&amp;gt;utf8&amp;lt;/charset&amp;gt;&#xA;            &amp;lt;/encoder&amp;gt;&#xA;    &amp;lt;/appender&amp;gt;&#xA;&#xA;&#xA;    &amp;lt;!--html格式日志文件输出appender--&amp;gt;&#xA;    &amp;lt;appender name=&amp;#34;SERVICE_APPENDER&amp;#34; class=&amp;#34;ch.qos.logback.core.FileAppender&amp;#34;&amp;gt;&#xA;        &amp;lt;!--日志文件保存路径--&amp;gt;&#xA;        &amp;lt;file&amp;gt;${log_dir}/logback.html&amp;lt;/file&amp;gt;&#xA;        &amp;lt;!--html 消息格式配置--&amp;gt;&#xA;        &amp;lt;encoder class=&amp;#34;ch.qos.logback.core.encoder.LayoutWrappingEncoder&amp;#34;&amp;gt;&#xA;            &amp;lt;layout class=&amp;#34;ch.qos.logback.classic.html.HTMLLayout&amp;#34;&amp;gt;&#xA;            &amp;lt;/layout&amp;gt;&#xA;        &amp;lt;/encoder&amp;gt;&#xA;    &amp;lt;/appender&amp;gt;&#xA;&#xA;&#xA;        &amp;lt;appender name=&amp;#34;All_APPENDER&amp;#34; class=&amp;#34;ch.qos.logback.core.rolling.RollingFileAppender&amp;#34;&amp;gt;&#xA;            &amp;lt;file&amp;gt;${log_dir}/All/demo.log&amp;lt;/file&amp;gt;&#xA;            &amp;lt;encoder&amp;gt;&#xA;                &amp;lt;pattern&amp;gt;%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n&amp;lt;/pattern&amp;gt;&#xA;            &amp;lt;/encoder&amp;gt;&#xA;            &amp;lt;rollingPolicy class=&amp;#34;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&amp;#34;&amp;gt;&#xA;                &amp;lt;fileNamePattern&amp;gt;${log_dir}/All/demo.%d{yyyy-MM-dd}.log&amp;lt;/fileNamePattern&amp;gt;&#xA;            &amp;lt;/rollingPolicy&amp;gt;&#xA;&#xA;    &amp;lt;/appender&amp;gt;&#xA;&#xA;&#xA;&#xA;&amp;lt;!--    &amp;lt;/appender&amp;gt;--&amp;gt;&#xA;&#xA;    &amp;lt;root level=&amp;#34;DEBUG&amp;#34;&amp;gt;&#xA;        &amp;lt;appender-ref ref=&amp;#34;STDOUT&amp;#34;/&amp;gt;&#xA;        &amp;lt;appender-ref ref=&amp;#34;All_APPENDER&amp;#34;&amp;gt;&amp;lt;/appender-ref&amp;gt;&#xA;        &amp;lt;appender-ref ref=&amp;#34;SERVICE_APPENDER&amp;#34;/&amp;gt;&#xA;    &amp;lt;/root&amp;gt;&#xA;&#xA;&#xA;&#xA;        &amp;lt;logger name=&amp;#34;org/example&amp;#34; level=&amp;#34;ERROR&amp;#34; additivity=&amp;#34;true&amp;#34;&amp;gt;&#xA;            &amp;lt;appender-ref ref=&amp;#34;SERVICE_APPENDER&amp;#34;/&amp;gt;&#xA;        &amp;lt;/logger&amp;gt;&#xA;&#xA;&amp;lt;/configuration&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;官网文档阅读&#34;&gt;官网文档阅读&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://logback.qos.ch/manual/introduction.html&#34;&gt;文档首页&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>rocketmq源码阅读（一）：生产者初识</title>
      <link>http://localhost:1313/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%80%E7%94%9F%E4%BA%A7%E8%80%85%E5%88%9D%E8%AF%86/</link>
      <pubDate>Wed, 16 Apr 2025 19:28:54 +0000</pubDate>
      <guid>http://localhost:1313/posts/rocketmq%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%80%E7%94%9F%E4%BA%A7%E8%80%85%E5%88%9D%E8%AF%86/</guid>
      <description>&lt;h1 id=&#34;源码阅读一&#34;&gt;源码阅读（一）&lt;/h1&gt;&#xA;&lt;h2 id=&#34;搭建环境&#34;&gt;搭建环境&lt;/h2&gt;&#xA;&lt;p&gt;rocketmq的java-sdk并没有什么特殊的构建的，直接加载maven即可。&lt;/p&gt;&#xA;&lt;p&gt;节点部署：&#xA;&lt;a href=&#34;https://rocketmq.apache.org/zh/docs/quickStart/02quickstartWithDocker&#34;&gt;Docker 部署 RocketMQ | RocketMQ&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;面板部署：&#xA;&lt;a href=&#34;https://github.com/apache/rocketmq-dashboard&#34;&gt;apache/rocketmq-dashboard&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;hhh，遵从官网部署，点点点就可以了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;生产者初识&#34;&gt;生产者初识&lt;/h2&gt;&#xA;&lt;p&gt;阅读源码首先要明确的目标，或者说我们想要了解什么？&lt;/p&gt;&#xA;&lt;p&gt;在我看来生产者的职责分为以下几个&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;1,与&lt;code&gt;namesrv&lt;/code&gt;沟通，维护本地的&lt;code&gt;broker&lt;/code&gt;通信队列&lt;/li&gt;&#xA;&lt;li&gt;2,发送&lt;code&gt;topic&lt;/code&gt;消息到远程&lt;code&gt;broker&lt;/code&gt;&lt;/li&gt;&#xA;&lt;li&gt;3,根据响应结果判断是否发送成功，以及失败情况下的策略&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;每一个生产者对于&lt;code&gt;broker&lt;/code&gt;节点来说是消息的来源，但是&lt;code&gt;broker&lt;/code&gt;并不关心究竟有多少个生产者在为它提供服务，对于消费者来说同样如此！&lt;/p&gt;&#xA;&lt;p&gt;首先定位到源码示例&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;%5Bhttps://blog.wenzhuo4657.org/img/2025/04/ce5a9ce6d095400e1dfefe77486c2729.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;示例的逻辑并不复杂，但问题是怎么处理的？尝试追溯&lt;code&gt;DefaultMQProducer&lt;/code&gt;,找到客户端的sdk模块&lt;code&gt;rocketmq-client&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;观察&lt;code&gt;DefaultMQProducer&lt;/code&gt;的父类路径发现&lt;code&gt;extends ClientConfig implements MQProducer&lt;/code&gt;,对于&lt;code&gt;MQProducer&lt;/code&gt;没啥好说的，定义了生产者方法规范，而且没有注释。小白一只的我将目光对准&lt;code&gt;ClientConfig&lt;/code&gt;,&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;private String clientIP = NetworkUtil.getLocalAddress();&lt;/code&gt;  寻找ip的方法。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;private String instanceName = System.getProperty(&amp;quot;rocketmq.client.name&amp;quot;, &amp;quot;DEFAULT&amp;quot;);&lt;/code&gt;  生产者名称&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    # 客户端id，这个要注意与生产者名称区分，在我看来是类似与多元组一样的， ip+instanceName+......&#xA;   &#xA;    public String buildMQClientId() {&#xA;        StringBuilder sb = new StringBuilder();&#xA;        sb.append(this.getClientIP());&#xA;&#xA;        sb.append(&amp;#34;@&amp;#34;);&#xA;        sb.append(this.getInstanceName());&#xA;        if (!UtilAll.isBlank(this.unitName)) {&#xA;            sb.append(&amp;#34;@&amp;#34;);&#xA;            sb.append(this.unitName);&#xA;        }&#xA;&#xA;        if (enableStreamRequestType) {&#xA;            sb.append(&amp;#34;@&amp;#34;);&#xA;            sb.append(RequestType.STREAM);&#xA;        }&#xA;&#xA;        return sb.toString();&#xA;    }&#xA;    &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意的是对于修改&lt;code&gt;clentIP&lt;/code&gt;可以直接通过&lt;code&gt;producer.setClientIP(DEFAULT_NAMESRVADDR);&lt;/code&gt;,&lt;code&gt;clientID&lt;/code&gt;则并没有这个字段，他是在生产者启动时自动生成的的一个标识符，或许可以这么说 &lt;code&gt;ip+instanceName&lt;/code&gt;表示了这个主机上的所有rocketmq的消费者和生产者。&lt;/p&gt;&#xA;&lt;p&gt;追溯&lt;code&gt;buildMQClientId&lt;/code&gt;即可发现，start的调用链路中存在这个方法。&lt;/p&gt;</description>
    </item>
    <item>
      <title>maven插件新手解惑</title>
      <link>http://localhost:1313/posts/maven%E6%8F%92%E4%BB%B6%E6%96%B0%E6%89%8B%E8%A7%A3%E6%83%91/</link>
      <pubDate>Sun, 06 Apr 2025 16:44:01 +0000</pubDate>
      <guid>http://localhost:1313/posts/maven%E6%8F%92%E4%BB%B6%E6%96%B0%E6%89%8B%E8%A7%A3%E6%83%91/</guid>
      <description>&lt;h2 id=&#34;maven插件的定义&#34;&gt;maven插件的定义&lt;/h2&gt;&#xA;&lt;p&gt;maven插件的定义是在pom文件下的&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;plugins&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &#x9;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;groupId&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;org.&lt;span style=&#34;color:#a6e22e&#34;&gt;springframework&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;boot&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;groupId&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;artifactId&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;spring&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;boot&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;maven&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;artifactId&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;version&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;2.&lt;span style=&#34;color:#a6e22e&#34;&gt;6&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;version&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;plugin&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/&lt;/span&gt;plugins&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与常规的依赖定位一致，而插件的配置则是在&lt;executions&gt;、&lt;configuration&gt;等标签下定义的，他们或许是环境变量或许是在maven生命周期的插入点。&lt;/p&gt;&#xA;&lt;p&gt;简单来说maven插件的两个用途&lt;/p&gt;&#xA;&lt;p&gt;1,融入maven生命周期，增加外挂式的功能&lt;/p&gt;&#xA;&lt;p&gt;2,不参入maven生周期，直接使用（例如，在微服务领域下，将服务的定义IDL文件编译为特定语言的接口文件。）&lt;/p&gt;&#xA;&lt;h2 id=&#34;maven插件的原理&#34;&gt;maven插件的原理&lt;/h2&gt;&#xA;&lt;p&gt;&lt;strong&gt;Maven 是一个意第绪语单词，意为 知识的积累者，最初是为了简化 Jakarta Turbine 项目的构建过程而创建的。当时有多个项目，每个项目都有自己的 Ant 构建文件，而且每个文件都略有不同。JAR 被签入 CVS。我们希望有一种标准的方法来构建项目，明确定义项目包含的内容，一种发布项目信息的简便方法，以及一种在多个项目之间共享 JAR 的方法。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;这段话取自&lt;a href=&#34;https://maven.apache.org/what-is-maven.html&#34;&gt;官网&lt;/a&gt;对于maven的定义,可以看出maven的核心在于管理jar文件，便于多个不同的项目去引入相同的jar。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;“Maven” 实际上只是一组 Maven 插件的核心框架。换句话说，插件是执行大部分实际操作的地方，插件用于：创建 jar 文件、创建 war 文件、编译代码、单元测试代码、创建项目文档等等。您能想到的在项目上执行的几乎所有操作都是作为 Maven 插件实现的。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;这段话取自&lt;a href=&#34;https://maven.apache.org/guides/introduction/introduction-to-plugins.html&#34;&gt;插件开发简介&lt;/a&gt;,也就是说maven的插件的目标是生命周期，而生命周期在官方术语中被称为&lt;code&gt;Mojo&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;进而去查看maven插件开发的示例即可发现，插件实际上就是依托与maven这个框架所提供的扩展点所构建出来的可执行jar文件。&lt;/p&gt;&#xA;&lt;p&gt;至此对于maven插件的和依赖的之间的关系就已经很明确了，他们实际上是一样，都可以作为依赖去使用，实际上更准确的说法是，可以融入maven生命周期的依赖被称为maven插件。&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;如果想要学习maven插件开发，就一定要仔细查看maven的&lt;a href=&#34;https://maven.apache.org/plugin-developers/index.html&#34;&gt;官方文档&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;maven插件示例解读&#34;&gt;maven插件示例解读&lt;/h2&gt;&#xA;&lt;h3 id=&#34;spring-boot-maven-plugin&#34;&gt;spring-boot-maven-plugin&lt;/h3&gt;&#xA;&lt;h4 id=&#34;前置知识&#34;&gt;前置知识&lt;/h4&gt;&#xA;&lt;p&gt;什么是springboot?通常我们说springboot是对于各种依赖自动配置的boot工具，便于快速开发，避免依赖的困扰，这种方式目前已经不止是springboot的独有，只是它依托与spring生态最为出名而已。&lt;/p&gt;&#xA;&lt;p&gt;springboot与spring最大的区别在我这个小白看来则是注解开发，@SpringBootApplication定义程序的启动入口，所有的程序都需要依托于这个主类进行加载，而传统的spring项目则需要依托与web容器启动servlet配置，也就WebApplicationInitializer（简单来说是用于将项目中所有的servlet加载到web容器当中，参如http请求当中的rest控制器部分）。&lt;/p&gt;&#xA;&lt;p&gt;无论如何我们需要明白一个jar包的执行是需要一个入口！而不同项目的入口是不一样！&lt;/p&gt;&#xA;&lt;p&gt;对于普通jar包来说，他只需要将当前项目的class文件打包即可，而一个可执行的jar包则额外的需要依赖、入口、引导器。（如果稍微了解一点jvm知识就应该明白，java程序并不会在加载阶段去校验import是否存在，至于执行更是需要一个明确的入口。）&lt;/p&gt;&#xA;&lt;p&gt;可执行jar:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;将依赖引入jar包当中&lt;/li&gt;&#xA;&lt;li&gt;META-INF/MANIFEST.MF文件中存在启动类等配置&lt;/li&gt;&#xA;&lt;li&gt;使用命令&lt;code&gt;java -jar&lt;/code&gt; 执行&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;不可执行jar:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内部只有项目的class文件&lt;/li&gt;&#xA;&lt;li&gt;META-INF/MANIFEST.MF文件中不存在启动类等配置&lt;/li&gt;&#xA;&lt;li&gt;不能使用&lt;code&gt;java -jar&lt;/code&gt; 执行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;java -jar执行逻辑： JVM会根据MANIFEST.MF文件中的Main-Class属性找到程序的入口点（即主类），然后开始执行该类的main方法&lt;/p&gt;&#xA;&lt;p&gt;注意： 我找不到2.6的文档，凑和看&lt;a href=&#34;https://docs.spring.io/spring-boot/maven-plugin/getting-started.html&#34;&gt;spring官方文档&lt;/a&gt;的最新版本解说。&lt;/p&gt;&#xA;&lt;h4 id=&#34;spring-boot-maven-pluginrepackage&#34;&gt;spring-boot-maven-plugin:repackage&lt;/h4&gt;&#xA;&lt;p&gt;&lt;em&gt;该repackage目标不应在命令行上单独使用，因为它会对 阶段生成的源jar（或）进行操作&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;翻译成人话就是他需要在maven生命周期的打包阶段之后执行，并且无法单独执行，只能绑定在该打包阶段伴随执行。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;           &amp;lt;plugin&amp;gt;&#xA;            &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt;&#xA;            &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt;&#xA;            &amp;lt;version&amp;gt;2.6.0&amp;lt;/version&amp;gt;&#xA;&#xA;                &amp;lt;executions&amp;gt;&#xA;&amp;lt;!--                    每一个&amp;lt;execution&amp;gt;都是一个归档包的定义 --&amp;gt;&#xA;&amp;lt;!--                    可执行jar包配置--&amp;gt;&#xA;                    &amp;lt;execution&amp;gt;&#xA;                        &amp;lt;id&amp;gt;repackage&amp;lt;/id&amp;gt;&#xA;                        &amp;lt;goals&amp;gt;&#xA;&amp;lt;!--                            绑定生命周期在package后--&amp;gt;&#xA;                            &amp;lt;goal&amp;gt;repackage&amp;lt;/goal&amp;gt;&#xA;                        &amp;lt;/goals&amp;gt;&#xA;                        &amp;lt;configuration&amp;gt;&#xA;&amp;lt;!--                            为可执行jar包新增后缀名，避免和普通jar包冲突--&amp;gt;&#xA;                            &amp;lt;classifier&amp;gt;exec&amp;lt;/classifier&amp;gt;&#xA;                        &amp;lt;/configuration&amp;gt;&#xA;                    &amp;lt;/execution&amp;gt;&#xA;        &amp;lt;/plugin&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;classifier: 分类器。官网的解释很绕口，总之实现结果就是给重新打包的jar增加后缀，否则，就会替换普通jar，普通jar最终也只会在构建的target中出现。&lt;/p&gt;</description>
    </item>
    <item>
      <title>关于@RequestParam的常见误区</title>
      <link>http://localhost:1313/posts/%E5%85%B3%E4%BA%8E-requestparam%E7%9A%84%E5%B8%B8%E8%A7%81%E8%AF%AF%E5%8C%BA/</link>
      <pubDate>Sat, 29 Mar 2025 15:35:29 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%85%B3%E4%BA%8E-requestparam%E7%9A%84%E5%B8%B8%E8%A7%81%E8%AF%AF%E5%8C%BA/</guid>
      <description>&lt;p&gt;首先说结论，@RequestParam不仅可以结束queryString的参数，还可以接收表单数据。&lt;/p&gt;&#xA;&lt;h2 id=&#34;关于http载荷的区分&#34;&gt;关于http载荷的区分&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;queryString&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;http://example.com/path?key1=value1&amp;amp;key2=value2&amp;amp;key3=value3&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;无论是get还是post，他在url上的表现都是上述，而关于get和post的区别主要显示在http报文上字段填充。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;GET /search?q=springboot&amp;amp;page=1 HTTP/1.1&#xA;Host: example.com&#xA;Accept: application/json&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;路径和请求体可以共存，但是他们都统一可以使用作为queryString参数进行键值对解析。&#xA;POST /submit?id=123 HTTP/1.1&#xA;Host: example.com&#xA;Content-Type: application/json&#xA;&#xA;{&amp;#34;name&amp;#34;: &amp;#34;Alice&amp;#34;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;事实上，queryStirng参数的核心在于键值，而不是位于请求体、路径。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;multipart/form-data&lt;/p&gt;&#xA;&lt;p&gt;文件上传&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;application/x-www-form-urlencoded&lt;/p&gt;&#xA;&lt;p&gt;表单文件&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>八大排序算法梳理</title>
      <link>http://localhost:1313/posts/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%A2%B3%E7%90%86/</link>
      <pubDate>Tue, 18 Mar 2025 09:42:18 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%85%AB%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%A2%B3%E7%90%86/</guid>
      <description>&lt;p&gt;本篇blog的语言为java实现，介意请划走&lt;/p&gt;&#xA;&lt;h1 id=&#34;八大排序算法&#34;&gt;八大排序算法&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;冒泡排序&lt;/li&gt;&#xA;&lt;li&gt;选择排序&lt;/li&gt;&#xA;&lt;li&gt;插入排序&lt;/li&gt;&#xA;&lt;li&gt;希尔排序&lt;/li&gt;&#xA;&lt;li&gt;快速排序&lt;/li&gt;&#xA;&lt;li&gt;归并排序&lt;/li&gt;&#xA;&lt;li&gt;桶排序&lt;/li&gt;&#xA;&lt;li&gt;堆排序&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;上述排序值得注意的是堆排序，他利用顺序二叉树实现了对堆元素的随机存取，而他所操作的虽然是数组结构，但本质上我们将其视为一个二叉树。&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本排序算法并不复杂甚至称不上算法理解即可&#34;&gt;基本排序算法（并不复杂，甚至称不上算法，理解即可）&lt;/h2&gt;&#xA;&lt;h3 id=&#34;冒泡&#34;&gt;冒泡&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bubble_sort&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; arr) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i, j, temp, len &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; len &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1 &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; i; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;&#x9;arr&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;时间复杂度（n^2）&lt;/p&gt;&#xA;&lt;p&gt;每次排序将最大值放入末尾，且注意，该算法的核心在于逐步排序，内层循环将较小或者较大的值下沉。&lt;/p&gt;&#xA;&lt;h3 id=&#34;选择排序&#34;&gt;选择排序&lt;/h3&gt;&#xA;&lt;p&gt;在冒泡排序中，我们逐步将最大或最小值后移，而选择排序优化了这个过程，比较过程并不移动数组元素，而是先找到将要移动的坐标。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Description: 选择排序&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param array&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @return void&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author JourWon&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @date 2019/7/11 23:31&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;selectionSort&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; array) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (array &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; array.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; 1) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array.&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// 保存最小数的索引&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; minIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; j &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; 1; j &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length; j&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// 找到最小的数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (array&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;j&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;minIndex&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&#x9;minIndex &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; j;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// 交换元素位置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; minIndex) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;swap(array, minIndex, i);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Description: 交换元素位置&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; *&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param array&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @param b&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @return void&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @author JourWon&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * @date 2019/7/11 17:57&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; array, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; b) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; temp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;array&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;a&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; array&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;array&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;b&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; temp;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;插入排序&#34;&gt;插入排序&lt;/h3&gt;&#xA;&lt;p&gt;该思想和动态规划有点像，即我们假定要将插入某个元素插入一个有序数组，那么我们只需要从数组起点或者某位逐步比较即可。&lt;/p&gt;</description>
    </item>
    <item>
      <title>git入门系列（一）</title>
      <link>http://localhost:1313/posts/git%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B8%80/</link>
      <pubDate>Wed, 12 Mar 2025 15:37:15 +0000</pubDate>
      <guid>http://localhost:1313/posts/git%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B8%80/</guid>
      <description>&lt;h1 id=&#34;git是什么&#34;&gt;git是什么？&lt;/h1&gt;&#xA;&lt;h2 id=&#34;以键值数据库为基础的文件版本控制系统&#34;&gt;以键值数据库为基础的文件版本控制系统&lt;/h2&gt;&#xA;&lt;p&gt;参考：https://git-scm.com/book/zh/v2/%e8%b5%b7%e6%ad%a5-Git-%e6%98%af%e4%bb%80%e4%b9%88%ef%bc%9f&lt;/p&gt;&#xA;&lt;p&gt;提醒： 本篇大部分在git官网都存在，只是顺序不一致，按我理解，这样有助于直接理解git的钩子机制。&lt;/p&gt;&#xA;&lt;p&gt;传统的文件版本数据库通过累计文件差异来区分文件版本，而git则是通过不断累计文件快照，然后使用链接管理当前版本应该显示的文件！&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;好处：如果存储文件差异，则不可避免的需要从文件内部开始操作，所带来的是复杂且绝不能出错的高安全性要求，而git管理文件链接，换言之，他只需要保存每个版本的文件链接列表即可，对于真实的文件数据，他们互相隔离。&lt;/li&gt;&#xA;&lt;li&gt;坏处：文件系统容易变得臃肿庞大。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;参考:https://git-scm.com/book/zh/v2/Git-%e5%86%85%e9%83%a8%e5%8e%9f%e7%90%86-Git-%e5%af%b9%e8%b1%a1&lt;/p&gt;&#xA;&lt;p&gt;文件快照存储的方式则是键值数据库，位于.git/objects 目录。&lt;/p&gt;&#xA;&lt;p&gt;存储值，并返回唯一键（SHA-1 哈希值）：&lt;code&gt;echo &#39;test content&#39; | git hash-object -w --stdin&lt;/code&gt;&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ echo &amp;#39;test content&amp;#39; | git hash-object -w --stdin&#xA;d670460b4b4aece5915caf5c68d12f560a9fe3e4&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;取出：&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git cat-file -p d670460b4b4aece5915caf5c68d12f560a9fe3e4&#xA;test content&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此外还有树对象用于组织这些键值。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250312155433934.png&#34; alt=&#34;image-20250312155433934&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;但是这仍然不是我们所熟知的git commit提交对象，这并没有提交信息的对应，这一点简单的说即是sha-1哈希值和文本的对应。随意找一个仓库都可以看到他们之间的关联。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250312155805995.png&#34; alt=&#34;image-20250312155805995&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;待补充&#34;&gt;待补充&lt;/h2&gt;&#xA;&lt;h1 id=&#34;钩子函数&#34;&gt;钩子函数&lt;/h1&gt;&#xA;&lt;p&gt;git的钩子位于&lt;code&gt;.git\hooks&lt;/code&gt;,默认情况下都是.sample结尾，去掉这个后缀即可启用。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250312160203955.png&#34; alt=&#34;image-20250312160203955&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;尝试打开即可他先，他们都是统一的shell脚本，所以如果想要看懂是需要一点基础的。&lt;/p&gt;&#xA;&lt;p&gt;统一机制：当以非零退出脚本时，停止提交。&lt;/p&gt;&#xA;&lt;p&gt;提醒：shell脚本的运行并不是git管理的一部分，他们只是使用了git命令的一段编码，通常使用/bin/bash解释器运行。&lt;/p&gt;&#xA;&lt;h2 id=&#34;pre-commit提交前执行&#34;&gt;pre-commit：提交前执行&lt;/h2&gt;&#xA;&lt;p&gt;作用：当前分支是否存在，如果不存在会提供一个sha-1哈希值。&lt;/p&gt;&#xA;&lt;p&gt;git rev-parse &amp;ndash;verify HEAD  （该命令可以验证参数是否可以转换为sha-1哈希值，即他是否在对象数据库中有对应关系，常见有分支名、标签名）&lt;/p&gt;&#xA;&lt;h2 id=&#34;prepare-commit-msg提交前执行&#34;&gt;prepare-commit-msg：提交前执行&lt;/h2&gt;&#xA;&lt;p&gt;作用：&lt;/p&gt;&#xA;&lt;p&gt;1，修改默认提交消息&lt;/p&gt;&#xA;&lt;p&gt;2，添加gpt签名&lt;/p&gt;&#xA;&lt;p&gt;3，将 git diff 结果插入提交消息的注释部分（咱不理解，自行查询）&lt;/p&gt;&#xA;&lt;p&gt;修改默认消息最直接的途径就是在文件末尾&lt;code&gt;echo &amp;quot;default msg&amp;quot; &amp;gt; $1&lt;/code&gt;,这样就会覆盖&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;/usr/bin/perl -i.bak -ne &#39;print unless(m/^. Please enter the commit message/..m/^#$/)&#39; &amp;quot;$COMMIT_MSG_FILE&amp;quot;&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>tomcat源码阅读（二）</title>
      <link>http://localhost:1313/posts/tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%BA%8C/</link>
      <pubDate>Mon, 10 Mar 2025 14:59:35 +0000</pubDate>
      <guid>http://localhost:1313/posts/tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%BA%8C/</guid>
      <description>&lt;h1 id=&#34;tomcat源码阅读&#34;&gt;tomcat源码阅读&lt;/h1&gt;&#xA;&lt;h2 id=&#34;日志模块梳理&#34;&gt;日志模块梳理&lt;/h2&gt;&#xA;&lt;p&gt;现在日志通常分为日志门面和日志的具体实现。&lt;/p&gt;&#xA;&lt;p&gt;日志门面：充当应用程序和日志框架之间的沟通媒介，可以在程序无感的条件下更换日志框架。&lt;/p&gt;&#xA;&lt;p&gt;日志的具体实现：直接记录日志(console、file)，并且需要注意的是，这些信息都是由日志门面交给日志实现的。&lt;/p&gt;&#xA;&lt;p&gt;对于非日志编程的程序员来说，我们只需要明白如何根据日志门面切换日志实现即可，没必要阅读日志实现的代码。&lt;/p&gt;&#xA;&lt;p&gt;常见的日志门面：JCL、slf4j&lt;/p&gt;&#xA;&lt;p&gt;常见的日志实现：JUL（java.util.logging）、log4j、logback、log4j2&lt;/p&gt;&#xA;&lt;h3 id=&#34;tomcat的日志门面juli&#34;&gt;tomcat的日志门面JULI&lt;/h3&gt;&#xA;&lt;p&gt;该日志门面位于源码包&lt;code&gt;org.apache.juli&lt;/code&gt;,基于JCL实现的。&lt;/p&gt;&#xA;&lt;p&gt;较为重要的三个类：&lt;/p&gt;&#xA;&lt;p&gt;org.apache.juli.logging.Log： 日志接口&lt;/p&gt;&#xA;&lt;p&gt;org.apache.juli.logging.DirectJDKLog：tomcat的默认日志实现。&lt;/p&gt;&#xA;&lt;p&gt;org.apache.juli.logging.LogFactory: 与tomcat进行交互获取log接口实现。&lt;/p&gt;&#xA;&lt;p&gt;在源码中可以看到，无论是什么类要记录日志都必须使用到Log的实现类，而对于tomcat源码来说，唯一获取该实例的途径就是LogFactory#getLog(Class&lt;?&gt; clazz)。&lt;/p&gt;&#xA;&lt;p&gt;并且在LogFactory#release(ClassLoader classLoader)也可以看到日志实现默认为JUL,硬编码控制的。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    public static void release(ClassLoader classLoader) {&#xA;        // JULI&amp;#39;s log manager looks at the current classLoader so there is no&#xA;        // need to use the passed in classLoader, the default implementation&#xA;        // does not so calling reset in that case will break things&#xA;        if (!LogManager.getLogManager().getClass().getName().equals(&#xA;                &amp;#34;java.util.logging.LogManager&amp;#34;)) {&#xA;            LogManager.getLogManager().reset();&#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;关于日志实现log的加载&#34;&gt;关于日志实现log的加载&lt;/h2&gt;&#xA;&lt;p&gt;在LogFactory的无参构造器器中看到关键语句&lt;/p&gt;</description>
    </item>
    <item>
      <title>tomcat源码阅读（一）</title>
      <link>http://localhost:1313/posts/tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%80/</link>
      <pubDate>Fri, 07 Mar 2025 16:07:46 +0000</pubDate>
      <guid>http://localhost:1313/posts/tomcat%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B8%80/</guid>
      <description>&lt;h1 id=&#34;tomcat源码&#34;&gt;tomcat源码&lt;/h1&gt;&#xA;&lt;h2 id=&#34;idea环境搭建&#34;&gt;idea环境搭建&lt;/h2&gt;&#xA;&lt;p&gt;源码版本apache-tomcat-9.0.43-src&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/src/&#34;&gt;https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.43/src/&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;注意： 不同版本的搭建方式可能略有不同，但这源码核心是大差不差的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;安装ant已安装的可以直接跳过&#34;&gt;安装ant(已安装的可以直接跳过)&lt;/h3&gt;&#xA;&lt;p&gt;Apache Ant 是一个帮助构建软件的 Java 库和命令行工具。&lt;/p&gt;&#xA;&lt;p&gt;官网：https://ant.apache.org/bindownload.cgi&lt;/p&gt;&#xA;&lt;p&gt;直接下载最新版即可，解压之后设置环境变量&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ANT_HOME=/Library/Apache/apache-ant-1.9.15&#xA;PATH=$PATH:$ANT_HOME/bin&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用&lt;code&gt;ant -verison&lt;/code&gt;验证安装是否成功&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250307171403529.png&#34; alt=&#34;image-20250307171403529&#34;&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;构建项目&#34;&gt;构建项目&lt;/h3&gt;&#xA;&lt;p&gt;&lt;em&gt;在打开idea之前操作，这一点非常重要！！！否则会由于编译器的一些操作导致XXXXX&lt;/em&gt;&lt;/p&gt;&#xA;&lt;p&gt;直接将res目录idea-support中的.idea文件粘贴到根目录中的.idea（手动创建&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250309134412453.png&#34; alt=&#34;image-20250309134412453&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250309134454556.png&#34; alt=&#34;image-20250309134454556&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250309134544101.png&#34; alt=&#34;image-20250309134544101&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;此时打开项目可以发现项目被正确加载，但是会依赖报错&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250309135659189.png&#34; alt=&#34;image-20250309135659189&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;尝试构建项目，启动test&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250309135743059.png&#34; alt=&#34;image-20250309135743059&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250309134654470.png&#34; alt=&#34;image-20250309134654470&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;将这些jar包和ant目录下的lib库加入项目的外部库即可。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250309141125493.png&#34; alt=&#34;image-20250309141125493&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;启动&#34;&gt;启动&lt;/h2&gt;&#xA;&lt;p&gt;找到启动类Bootstrap&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250309141245515.png&#34; alt=&#34;image-20250309141245515&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250309141253099.png&#34; alt=&#34;image-20250309141253099&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;中文乱码&#34;&gt;中文乱码&lt;/h1&gt;&#xA;&lt;p&gt;对于乱码，网上搜索在日志配置中更改编码，&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/weixin_44109450/article/details/126544310&#34;&gt;https://blog.csdn.net/weixin_44109450/article/details/126544310&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;但是对于源码编译环境来说，似乎并不会读取conf下的配置，追溯源码找到&lt;code&gt;java.util.logging.ConsoleHandler&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;断点调试发现，并没有获取到配置&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250309142742777.png&#34; alt=&#34;image-20250309142742777&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;并且由于该类属于依赖包jdk的一部分，&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250309142835530.png&#34; alt=&#34;image-20250309142835530&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;进一步追溯之后发现关键读取文件的方法LogManager#readConfiguration（）&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;   String fname = System.getProperty(&amp;#34;java.util.logging.config.file&amp;#34;);&#xA;        if (fname == null) {&#xA;            fname = System.getProperty(&amp;#34;java.home&amp;#34;);&#xA;            if (fname == null) {&#xA;                throw new Error(&amp;#34;Can&amp;#39;t find java.home ??&amp;#34;);&#xA;            }&#xA;            File f = new File(fname, &amp;#34;lib&amp;#34;);&#xA;            f = new File(f, &amp;#34;logging.properties&amp;#34;);&#xA;            fname = f.getCanonicalPath();&#xA;        }&#xA;        try (final InputStream in = new FileInputStream(fname)) {&#xA;            final BufferedInputStream bin = new BufferedInputStream(in);&#xA;            readConfiguration(bin);&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先说结论，无论使更改成conf还是jdk目录下的logging.properties,他们所影响的编码都只是外层的一部分，不能影响tomcat输出的报错信息。&lt;/p&gt;</description>
    </item>
    <item>
      <title>零拷贝</title>
      <link>http://localhost:1313/posts/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Sat, 15 Feb 2025 16:23:43 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E9%9B%B6%E6%8B%B7%E8%B4%9D/</guid>
      <description>&lt;p&gt;首先说结论，零拷贝技术是针对与磁盘中数据到网卡发送数据的一个简化，是系统函数级别的优化，与程序编程无关，在使用中我们只需要调用即可。&lt;/p&gt;&#xA;&lt;h2 id=&#34;系统拷贝-readwrite&#34;&gt;系统拷贝 read/write&lt;/h2&gt;&#xA;&lt;p&gt;前置概念：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;页缓存（内核缓冲区）：该区域是为了提升磁盘数据的读写速度所设立的一个区域，处于（主存）内存当中。&lt;/li&gt;&#xA;&lt;li&gt;socket缓冲区：是内核为每个 Socket 分配的内存区域，用于临时存储发送和接收的数据，处于（主存）内存当中。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;os系统的加载，学过操作系统的都知道，内存当中的区域分为内核态和用户态。&lt;/p&gt;&#xA;&lt;p&gt;在操作系统启动时，cpu会根据cs:ip表示的地址进行寻址，找到位于磁盘当中的操作系统程序部分，最终结果可以认为将系统代码搬进了ram主存当中，并且设置了一些列安全手段，除此之外则还为用户态提供了一系列系统函数。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;磁盘== “外设”&lt;/strong&gt;：&lt;/p&gt;&#xA;&lt;p&gt;对于cpu来说，磁盘相当于外设，它会通过外设上的寄存器来管理，此处衍生出的技术为dma。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;dma:为了避免cpu的重复性的移动地址等的操作，进行的一项优化，具体来说，读取数据到缓冲区等重复性劳动可以交给dma设备。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;但是dma拷贝也并非万能，在某些场景下它不能使用&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;用户空间和内核空间之间的数据拷贝：内核不能直接访问用户态内存&lt;/li&gt;&#xA;&lt;li&gt;调试和诊断：dma是硬件自动完成，难以插入调试逻辑。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://blog.wenzhuo4657.org/img/image-20250215171022865.png&#34; alt=&#34;image-20250215171022865&#34;&gt;&lt;/p&gt;&#xA;&lt;h1 id=&#34;系统函数&#34;&gt;系统函数&lt;/h1&gt;&#xA;&lt;h2 id=&#34;mmapwrite&#34;&gt;mmap+write&lt;/h2&gt;&#xA;&lt;p&gt;将page buffer和程序工作缓存空间进行映射，减少page-buffer-&amp;gt;程序缓存的cpu拷贝，但是对于程序工作缓存-》socket buffer这一部分仍然需要cpu拷贝。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;为什么仍然是cpu拷贝？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;这里将其理解为，我们仅仅是做到了在用户态可以看到page buffer,但是并没有打破用户态和内核态的内存空间限制，所以此处的拷贝仍然是cpu拷贝，而并非dma拷贝。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250215172019525.png&#34; alt=&#34;image-20250215172019525&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;sendfile&#34;&gt;sendfile&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250215172632051.png&#34; alt=&#34;image-20250215172632051&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如图，sendfile使page buff直接拷贝到socket buffer。&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;为什么使用的使cpu拷贝，而非DMA拷贝？&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;ds给我的答案使，DMA通常用于外设和主存之间，&lt;/p&gt;&#xA;&lt;h2 id=&#34;网卡支持sg-dma技术的sendfile&#34;&gt;网卡支持SG-DMA技术的sendfile&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250215173227238.png&#34; alt=&#34;image-20250215173227238&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;如图，该函数实际上是外设功能的调用，原本socket buffer的功能被网卡认为多余，获取可以被替代之类的，提出直接从page buffer中拷贝。&lt;/p&gt;&#xA;&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;&#xA;&lt;p&gt;实际应用：&lt;/p&gt;&#xA;&lt;p&gt;普通的文件读写：read/write,有利于提高系统速度，但这是非具体场景的随机读取。&lt;/p&gt;&#xA;&lt;p&gt;rocketmq: mmap+write，适合小文件并行，因为该区域用户缓存都可以看到。&lt;/p&gt;&#xA;&lt;p&gt;kafka:sendfile,适合大文件，或者说对于小文件并行支持不好，因为为了安全性，通常会对page buffer进行锁定，避免并发问题。&lt;/p&gt;&#xA;&lt;p&gt;ps:上述总结可以喂给ds，会得到更加优质的回答！&lt;/p&gt;</description>
    </item>
    <item>
      <title>dubbo的spi</title>
      <link>http://localhost:1313/posts/dubbo%E7%9A%84spi/</link>
      <pubDate>Wed, 22 Jan 2025 16:47:11 +0000</pubDate>
      <guid>http://localhost:1313/posts/dubbo%E7%9A%84spi/</guid>
      <description>&lt;p&gt;dubbo的spi相比于jdk的spi而言，提供了更为强大的功能，主要来说是帮助我们更好的面对多个服务互相依赖的场景，并且做了一定优化。（例如：按需加载）&lt;/p&gt;&#xA;&lt;h2 id=&#34;按需加载&#34;&gt;按需加载&lt;/h2&gt;&#xA;&lt;p&gt;jdk的spi的配置文件&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;org.example.ToyotaCar&#xA;org.example.HondaCar&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dubbo的spi的配置文件&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;toyota=org.example.ToyotaCar&#xA;honda=org.example.HondaCar&#xA;wrapper=org.example.aop.CarWrapper1&#xA;wrapper=org.example.aop.CarWrapper2&#xA;Race=org.example.ioc.RaceRes&#xA;red=org.example.ioc.PenRes&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;二者的区别在于dubbo中使用键值，可以实现按需加载，请注意，该加载并非指配置文件的加载，而加载配置文件之后的对于&lt;strong&gt;服务对象的实例化&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;&#xA;&lt;h4 id=&#34;jdk的spi&#34;&gt;jdk的spi&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      ServiceLoader&amp;lt;Car&amp;gt; load = ServiceLoader.load(Car.class);&#xA;&#xA;//        获取迭代器遍历&#xA;        Iterator&amp;lt;Car&amp;gt; iterator = load.iterator();&#xA;        while (iterator.hasNext()){&#xA;            Car registry = iterator.next();&#xA;            registry.run();&#xA;        }&#xA;        &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;追溯源码可以看到迭代器内部。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250122174648892.png&#34; alt=&#34;image-20250122174648892&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;关键成员变量&lt;/p&gt;&#xA;&lt;p&gt;Iterator&lt;String&gt; pending ;//配置文件读取的数据  &lt;strong&gt;该变量也是迭代器&lt;/strong&gt;&#xA;String nextName ;//下一个将要读取的配置&lt;/p&gt;&#xA;&lt;p&gt;存在关键方法&lt;/p&gt;&#xA;&lt;p&gt;hasNextService：用于判断下一个服务名称，即配置文件当中的全限定类名。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;       private boolean hasNextService() {&#xA;            if (nextName != null) {&#xA;                return true;&#xA;            }&#xA;            if (configs == null) {&#xA;                try {&#xA;                    String fullName = PREFIX + service.getName();&#xA;                    if (loader == null)&#xA;                        configs = ClassLoader.getSystemResources(fullName);&#xA;                    else&#xA;                        configs = loader.getResources(fullName);&#xA;                } catch (IOException x) {&#xA;                    fail(service, &amp;#34;Error locating configuration files&amp;#34;, x);&#xA;                }&#xA;            }&#xA;            while ((pending == null) || !pending.hasNext()) {&#xA;                if (!configs.hasMoreElements()) {&#xA;                    return false;&#xA;                }&#xA;                pending = parse(service, configs.nextElement());&#xA;            }&#xA;            nextName = pending.next();//获取下一个元素，&#xA;            return true;&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;nextService：&lt;/p&gt;</description>
    </item>
    <item>
      <title>单路分发和多路分发</title>
      <link>http://localhost:1313/posts/%E5%8D%95%E8%B7%AF%E5%88%86%E5%8F%91%E5%92%8C%E5%A4%9A%E8%B7%AF%E5%88%86%E5%8F%91/</link>
      <pubDate>Tue, 21 Jan 2025 15:01:05 +0000</pubDate>
      <guid>http://localhost:1313/posts/%E5%8D%95%E8%B7%AF%E5%88%86%E5%8F%91%E5%92%8C%E5%A4%9A%E8%B7%AF%E5%88%86%E5%8F%91/</guid>
      <description>&lt;h1 id=&#34;单路分发&#34;&gt;单路分发&lt;/h1&gt;&#xA;&lt;p&gt;前置概念：&#xA;接收者对象：方法调用的目标对象&#xA;动态链接：在Java源文件被编译到字节码文件时，所有的变量和方法引用都作为符号引用保存在&lt;strong&gt;class文件的常量池&lt;/strong&gt;里。&#xA;引用类型/静态类型：java对象的声明类型&#xA;运行类型：jvm中对象的实际类型，是堆区数据的对象类型。&lt;/p&gt;&#xA;&lt;p&gt;java对象的多态性导致其引用类型和运行类型两者的区分，且各自的方法可能出现重写的现象，因而在对象执行过程中需要找到正确的方法。jvm只有在运行阶段才会创建对象，调用方法时根据动态链接找到堆区的方法实现。。&lt;/p&gt;&#xA;&lt;p&gt;java单路分发：接收者对象（实际上是指堆区创建的对象，也就是运行类型）调用方法时根据动态链接找到方法区的真正实现。&lt;/p&gt;&#xA;&lt;p&gt;单路分发定义：查找方法只能根据接收者对象判断，而不考虑方法参数的实际类型。&lt;/p&gt;&#xA;&lt;p&gt;例如：&lt;code&gt;string.valueof(bi)&lt;/code&gt; 接收者对象为string,单路分发只会考虑方法参数的引用类型，而非实际类型。&lt;/p&gt;&#xA;&lt;p&gt;注意：我们说java方法调用是单路分发，不考虑方法参数的&lt;strong&gt;实际类型&lt;/strong&gt;。其中对于实际类型的理解需要和重载相区分，因为重载是从参数的引用类型进行选择。而我们所说的单路分发、多路分发实际上是根据方法的实际运行类型进行选择方法的具体实现（动态链接），而java的机制仅仅只支持根据接受者对象来选择方法的动态链接，因此java的分发机制是单路分发。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;方法重载的匹配：编译器在编译时根据参数类型选择最匹配的方法。&lt;/li&gt;&#xA;&lt;li&gt;编译器生成的字节码：编译器将方法调用转换为字节码指令，这些指令包含了方法调用的具体信息。&lt;/li&gt;&#xA;&lt;li&gt;动态链接：在类加载时，方法引用被解析为具体的方法地址。在方法调用时，JVM 根据接收者对象的实际类型选择具体的方法实现。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;两路分发和多路分发&#34;&gt;两路分发和多路分发&lt;/h1&gt;&#xA;&lt;p&gt;参考;&lt;a href=&#34;https://www.cnblogs.com/Yee-Q/p/14035322.html&#34;&gt;Java 枚举 enum 详解 - 低吟不作语 - 博客园&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;java实现两路分发实际上就是在方法调用中再次触发方法调用，根据方法参数的实际类型进行选择方法。&lt;/p&gt;&#xA;&lt;p&gt;硬编码实现&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;##&lt;/span&gt; 可以使用枚举&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;、&lt;/span&gt;swich简化代码实现&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Outcome &lt;span style=&#34;color:#a6e22e&#34;&gt;compete&lt;/span&gt;(Item it) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{ &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;it.&lt;span style=&#34;color:#a6e22e&#34;&gt;eval&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;); &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;且注意，只有&lt;code&gt;it.eveal(this)&lt;/code&gt;找到的方法才是期望的方法，第一次执行找到compete方法是实现两路分发的过程。&lt;/p&gt;&#xA;&lt;p&gt;EnumMap 实现：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; enums;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.*;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import static&lt;/span&gt; enums.Outcome.*;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; RoShamBo5 &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; Competitor&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RoShamBo5&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    PAPER, SCISSORS, ROCK;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; EnumMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RoShamBo5,EnumMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RoShamBo5,Outcome&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            table &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EnumMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(RoShamBo5 it : RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;values&lt;/span&gt;())&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            table.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(it, &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; EnumMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;));&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        initRow(PAPER, DRAW, LOSE, WIN);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        initRow(SCISSORS, WIN, DRAW, LOSE);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        initRow(ROCK, LOSE, WIN, DRAW);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initRow&lt;/span&gt;(RoShamBo5 it,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        Outcome vPAPER, Outcome vSCISSORS, Outcome vROCK) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        EnumMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;RoShamBo5,Outcome&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; row &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;table&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(it);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;PAPER&lt;/span&gt;, vPAPER);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;SCISSORS&lt;/span&gt;, vSCISSORS);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        row.&lt;span style=&#34;color:#a6e22e&#34;&gt;put&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;ROCK&lt;/span&gt;, vROCK);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; Outcome &lt;span style=&#34;color:#a6e22e&#34;&gt;compete&lt;/span&gt;(RoShamBo5 it) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; table.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;).&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(it);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args) {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        RoShamBo.&lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;(RoShamBo5.&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;, 20);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;实际上依旧是二次选择，只是没有触发方法的动态链接机制，而是通过map类型手动填充了一张表格进行分发。&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;body&gt;&#xA;&#xA;&#xA;&#xA;hi！&#xA;&#xA;&lt;br&gt;&#xA;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;我的代号是猢狲（这当然是假名了，hhh），但是我渴望通过这个blog获得一些真正的东西。&#xA;&#xA;&lt;br&gt;&#xA;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;例如：&#xA;&#xA;&lt;li&gt;一些有用的知识&lt;/li&gt;&#xA;&#xA;&lt;li&gt;一个被认可的网站&lt;/li&gt;&#xA;&#xA;&lt;li&gt;生活中的些许乐趣&lt;/li&gt;&#xA;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;总之，我希望通过这个blog展示真实的自己！&#xA;&#xA;&lt;p align=&#34;right&#34;&gt;  ----   来自互联网的一个未知坐标&lt;/p&gt;&#xA;&#xA;​                                                         &#xA;&#xA;&lt;body&gt;</description>
    </item>
  </channel>
</rss>
