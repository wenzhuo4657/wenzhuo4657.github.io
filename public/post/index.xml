<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on wenzhuo4657</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on wenzhuo4657</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 22 Jan 2025 16:47:11 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>dubbo的spi</title>
      <link>http://localhost:1313/post/dubbo%E7%9A%84spi/</link>
      <pubDate>Wed, 22 Jan 2025 16:47:11 +0000</pubDate>
      <guid>http://localhost:1313/post/dubbo%E7%9A%84spi/</guid>
      <description>&lt;p&gt;dubbo的spi相比于jdk的spi而言，提供了更为强大的功能，主要来说是帮助我们更好的面对多个服务互相依赖的场景，并且做了一定优化。（例如：按需加载）&lt;/p&gt;&#xA;&lt;h2 id=&#34;按需加载&#34;&gt;按需加载&lt;/h2&gt;&#xA;&lt;p&gt;jdk的spi的配置文件&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;org.example.ToyotaCar&#xA;org.example.HondaCar&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;dubbo的spi的配置文件&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;toyota=org.example.ToyotaCar&#xA;honda=org.example.HondaCar&#xA;wrapper=org.example.aop.CarWrapper1&#xA;wrapper=org.example.aop.CarWrapper2&#xA;Race=org.example.ioc.RaceRes&#xA;red=org.example.ioc.PenRes&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;二者的区别在于dubbo中使用键值，可以实现按需加载，请注意，该加载并非指配置文件的加载，而加载配置文件之后的对于&lt;strong&gt;服务对象的实例化&lt;/strong&gt;。&lt;/p&gt;&#xA;&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;&#xA;&lt;h4 id=&#34;jdk的spi&#34;&gt;jdk的spi&lt;/h4&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      ServiceLoader&amp;lt;Car&amp;gt; load = ServiceLoader.load(Car.class);&#xA;&#xA;//        获取迭代器遍历&#xA;        Iterator&amp;lt;Car&amp;gt; iterator = load.iterator();&#xA;        while (iterator.hasNext()){&#xA;            Car registry = iterator.next();&#xA;            registry.run();&#xA;        }&#xA;        &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;追溯源码可以看到迭代器内部。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://blog.wenzhuo4657.org/img/image-20250122174648892.png&#34; alt=&#34;image-20250122174648892&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;关键成员变量&lt;/p&gt;&#xA;&lt;p&gt;Iterator&lt;!-- raw HTML omitted --&gt; pending ;//配置文件读取的数据  &lt;strong&gt;该变量也是迭代器&lt;/strong&gt;&#xA;String nextName ;//下一个将要读取的配置&lt;/p&gt;&#xA;&lt;p&gt;存在关键方法&lt;/p&gt;&#xA;&lt;p&gt;hasNextService：用于判断下一个服务名称，即配置文件当中的全限定类名。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;       private boolean hasNextService() {&#xA;            if (nextName != null) {&#xA;                return true;&#xA;            }&#xA;            if (configs == null) {&#xA;                try {&#xA;                    String fullName = PREFIX + service.getName();&#xA;                    if (loader == null)&#xA;                        configs = ClassLoader.getSystemResources(fullName);&#xA;                    else&#xA;                        configs = loader.getResources(fullName);&#xA;                } catch (IOException x) {&#xA;                    fail(service, &amp;#34;Error locating configuration files&amp;#34;, x);&#xA;                }&#xA;            }&#xA;            while ((pending == null) || !pending.hasNext()) {&#xA;                if (!configs.hasMoreElements()) {&#xA;                    return false;&#xA;                }&#xA;                pending = parse(service, configs.nextElement());&#xA;            }&#xA;            nextName = pending.next();//获取下一个元素，&#xA;            return true;&#xA;        }&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;nextService：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
