<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>猢狲</title>
    <link>http://localhost:1313/follow/</link>
    <description>Recent content on 猢狲</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 01 Jul 2025 21:52:32 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/follow/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Jdk8 17的重要新特性学习</title>
      <link>http://localhost:1313/follow/jdk8-17%E7%9A%84%E9%87%8D%E8%A6%81%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Tue, 01 Jul 2025 21:52:32 +0800</pubDate>
      <guid>http://localhost:1313/follow/jdk8-17%E7%9A%84%E9%87%8D%E8%A6%81%E6%96%B0%E7%89%B9%E6%80%A7%E5%AD%A6%E4%B9%A0/</guid>
      <description>&lt;p&gt;本文档的主要目的是学习从jdk8升级至jdk17的所有重要特性。&lt;/p&gt;&#xA;&lt;h2 id=&#34;单文件的源代码启动&#34;&gt;单文件的源代码启动&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java  recordTest.java&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样可以不用生成class文件，只是必须写在一个java文件中。&lt;/p&gt;&#xA;&lt;p&gt;对于 Java 初学者并希望尝试简单程序的人特别有用，并且能和 jshell 一起使用。一定能程度上增强了使用 Java 来写脚本程序的能力。&lt;/p&gt;&#xA;&lt;h2 id=&#34;模块化系统&#34;&gt;模块化系统&lt;/h2&gt;&#xA;&lt;h3 id=&#34;解释&#34;&gt;解释&lt;/h3&gt;&#xA;&lt;p&gt;引用： &lt;a href=&#34;https://www.cnblogs.com/IcanFixIt/p/6947763.html&#34;&gt;Java 9 揭秘（2. 模块化系统） - 林本托 - 博客园&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;作用： 对包结构进行类型声明&lt;/p&gt;&#xA;&lt;p&gt;过往的问题：&#xA;1， 依赖版本问题： jar依赖之间的相互引用，仅仅是根据类的全限定路径。但是众所周知，java中的大部分的依赖错误都并非是由于找不到全限定路径，而是引入了错误的版本。&#xA;核心： 不同版本的依赖（也就是jar）他们具有相同的权限类限定符的类，但是我们无法确定究竟要不要使用。&lt;/p&gt;&#xA;&lt;p&gt;2，依赖缺失问题： 只有在运行时需要加载某个类时，才会具体的检查他们是否存在。&lt;/p&gt;&#xA;&lt;p&gt;此外引申的问题是，单体jre（他必须加载完整的类）相比于jdk中裁剪的jre启动速度更慢，消耗内存更多，但是注意，这并不意味着单体jre比jdk更大，只是相比于jdk中jre大，这使得原本是想要通过剥离出一个可运行的jre来减少内存消耗，反倒比安装jdk消耗更大了。&lt;/p&gt;&#xA;&lt;p&gt;问题解决：&lt;/p&gt;&#xA;&lt;p&gt;1，显示声明模块的依赖：&#xA;模块必须声明对其他模块的显式依赖。 模块系统验证应用程序开发的所有阶段的依赖关系 —— 编译时，链接时和运行时。 假设一个模块声明对另一个模块的依赖，并且第二个模块在启动时丢失。&#xA;并报错启动时错误，在这之间会报错运行时操作，且显示的声明对于依赖错误的排除非常有用。&#xA;2，模块的强封装&#xA;模块必须明确声明其中哪些公共类型可以被其他模块访问。 除非这些模块明确地使其公共类型可访问，否则模块不能访问另一个模块中的公共类型。&lt;/p&gt;&#xA;&lt;p&gt;改变：&#xA;模块化将jdk重新划分为多个模块，这在idea中可以清晰的看到。&#xA;![[Pasted image 20250630160727.png]]&lt;/p&gt;&#xA;&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;&#xA;&lt;h4 id=&#34;1模块的可访问性配置&#34;&gt;1，模块的可访问性配置：&lt;/h4&gt;&#xA;&lt;p&gt;模块明确地使其公共类型可供其他模块使用，并且使用这些公共类型的模块明确声明对模块的依赖。 模块中的所有未导出的软件包都是模块的私有的，它们不能在模块之外使用。&lt;/p&gt;&#xA;&lt;h4 id=&#34;2模块图&#34;&gt;2，模块图&lt;/h4&gt;&#xA;&lt;p&gt;应用程序的模块化结构可以被视为一个称为模块图。 在模块图中，每个模块都表示为一个节点。 如果第一个模块依赖于第二个模块，则存在从模块到另一个模块的有向边。 通过将称为根模块的一组初始模块的依赖关系与称为可观察模块的模块系统已知的一组模块相结合来构建模块图。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-p 依赖模块位置  -m代表根模块定义/所检查模块  ： 模块名：主类&#xA;java -p lib -m claim/pkg3.Main&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;3-语法&#34;&gt;3， 语法&lt;/h4&gt;&#xA;&lt;h5 id=&#34;基本语句&#34;&gt;基本语句&lt;/h5&gt;&#xA;&lt;p&gt;五种基本语句&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vps脚本收集</title>
      <link>http://localhost:1313/follow/vps%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/</link>
      <pubDate>Tue, 01 Jul 2025 16:04:35 +0800</pubDate>
      <guid>http://localhost:1313/follow/vps%E8%84%9A%E6%9C%AC%E6%94%B6%E9%9B%86/</guid>
      <description>&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/NodeSeekDev/NodeScriptKit&#34;&gt;NodeScriptKit&lt;/a&gt;&lt;/strong&gt;：nodeseek社区维护的脚本合集&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;2,&lt;a href=&#34;https://github.com/sjlleo/netflix-verify&#34;&gt;netflix-verify&lt;/a&gt;：奈飞解锁监测&lt;/p&gt;&#xA;&lt;p&gt;3，&lt;strong&gt;&lt;a href=&#34;https://github.com/xykt/IPQuality&#34;&gt;IPQuality&lt;/a&gt;&lt;/strong&gt;：IP质量检测脚本&lt;/p&gt;&#xA;&lt;p&gt;4，&lt;a href=&#34;https://vps.la/2023/05/10/vps%E5%B8%B8%E7%94%A8%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%ACunixbench-yabs-bench-%E4%B8%89%E7%BD%91%E5%9B%9E%E7%A8%8B%E8%B7%AF%E7%94%B1%E5%8F%8A%E6%B5%8B%E9%80%9F-ping-pe%E7%AD%89/&#34;&gt;脚本收录&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jdk的接口收集</title>
      <link>http://localhost:1313/follow/jdk%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%94%B6%E9%9B%86/</link>
      <pubDate>Sun, 29 Jun 2025 11:10:33 +0800</pubDate>
      <guid>http://localhost:1313/follow/jdk%E7%9A%84%E6%8E%A5%E5%8F%A3%E6%94%B6%E9%9B%86/</guid>
      <description>&lt;h1 id=&#34;jdk17&#34;&gt;jdk17&lt;/h1&gt;&#xA;&lt;p&gt;需要注意的，无论是何种依赖，他们需要jdk原因都是需要jdk定义的通用接口，换句话说，在执行时最底层一定会使用到他们，这对于问题调试非常有用，我们可以直接定位到这些接口，查看究竟是什么地方有问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;外部接口收集&#34;&gt;外部接口收集&lt;/h2&gt;&#xA;&lt;h3 id=&#34;sql&#34;&gt;sql&lt;/h3&gt;&#xA;&lt;p&gt;只要支持sql，应当都可以使用这些接口&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.sql.Connection     与特定数据库的连接 （会话&#xA;java.sql.Statement    用于执行静态 SQL 语句并返回其生成的结果的对象&#xA;javax.sql.DataSource  用于连接到此 DataSource 对象所表示的物理数据源的工厂&#xA;该 DataSource 接口由驱动程序供应商实现。有三种类型的实现：&#xA;基本实现 -- 生成标准 Connection 对象&#xA;连接池实现 -- 生成 Connection 将自动参与连接池的对象。此实现与中间层连接池管理器一起使用。&#xA;分布式事务实现 -- 生成 Connection 可用于分布式事务的对象，并且几乎总是参与连接池。此实现与中间层事务管理器一起使用，并且几乎总是与连接池管理器一起使用。&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ldap&#34;&gt;ldap&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;com.sun.jndi.ldap.LdapCtx      LDAP上下文实现&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;log&#34;&gt;log&lt;/h3&gt;&#xA;&lt;p&gt;这个接口是jdk提供的日志实现，但是多数情况下，我们使用logback等外部实现。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.util.logging.Logger     jul的日志记录根&#xA;java.util.logging.LogManager     有一个全局 LogManager 对象，用于维护一组关于 Logger 和日志服务的共享状态&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
